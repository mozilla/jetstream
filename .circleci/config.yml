version: 2.1

# See https://circleci.com/orbs/registry/orb/circleci/gcp-gcr
orbs:
  gcp-gcr: circleci/gcp-gcr@0.6.1

jobs:
  build:
    docker:
    - image: python:3.8
    steps:
    - checkout
    - restore_cache:
        keys:
          # when lock files change, use increasingly general patterns to restore cache
          - &cache_key
            python-packages-v1-{{ .Branch }}-{{ checksum "requirements.in" }}-{{ checksum "requirements.txt" }}
          - python-packages-v1-{{ .Branch }}-{{ checksum "requirements.in" }}-
          - python-packages-v1-{{ .Branch }}-
          - python-packages-v1-
    - &build
      run:
        name: Build
        command: |
          python3.8 -m venv venv/
          venv/bin/pip install --progress-bar off --upgrade -r requirements.txt
    - run:
        name: PyTest
        command: venv/bin/pytest --ignore=pensieve/tests/integration/ 
    - run:
        name: Mypy
        command: venv/bin/mypy pensieve
    - save_cache:
        paths:
        - venv/
        key: *cache_key
  integration:
    docker:
    - image: python:3.8
    steps:
    - checkout
    - skip_forked_pr:
      run:
        name: Early return if this build is from a forked PR
        command: |
          if [ -n "$CIRCLE_PR_NUMBER" ]; then
            echo "Cannot pass creds to forked PRs, so marking this step successful"
            circleci step halt
          fi
    - build:
      run:
        name: Build
        command: |
          python3.8 -m venv venv/
          venv/bin/pip install --progress-bar off --upgrade -r requirements.txt
    - pytest_integration_test:
      run:
        name: PyTest Integration Test
        # Google's client libraries will check for GOOGLE_APPLICATION_CREDENTIALS
        # and use a file in that location for credentials if present;
        # See https://cloud.google.com/docs/authentication/production
        command: |
          export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp.json"
          echo "$GCLOUD_SERVICE_KEY" > "$GOOGLE_APPLICATION_CREDENTIALS"
          venv/bin/pytest pensieve/tests/integration/

workflows:
  build-and-deploy:
    jobs:
      - build
      - gcp-gcr/build-and-push-image:
          requires:
            - build
          image: pensieve
          filters:
            branches:
              only:
                master
